// Copyright 2022 Lightbend Inc.

syntax = "proto3";

package akka.projection.grpc;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option java_package = "akka.projection.grpc.proto";

service EventReplicationService {
  rpc ReplicateEvents(stream StreamIn) returns (stream StreamOut);
}

message StreamIn {
  oneof message {
    InitReq init = 1;
  }
}

message InitReq {
  // replication stream for this entity type
  string entity_type = 1;
  // entities are partitioned by a deterministic slice (0-1023),
  // a consumer would handle a slice range from slice_min to slice_max
  int32 slice_min = 2;
  int32 slice_max = 3;
  Offset offset = 4;
}

message Offset {
  google.protobuf.Timestamp timestamp = 1;
  // events with these sequence numbers for this timestamp have already been
  // processed and doesn't have to be emitted again
  repeated PersistenceIdSeqNr seen = 2;
}

message PersistenceIdSeqNr {
  string persistence_id = 1;
  int64 seq_nr = 2;
}


message StreamOut {
  oneof message {
    Event event = 1;
    FilteredEvent filtered_event = 2;
  }
}

message Event {
  string persistence_id = 1;
  int64 seq_nr = 2;
  int32 slice = 3;
  Offset offset = 4;
  google.protobuf.Any payload = 5;
}

// Events that are filtered out are represented by this
// placeholder to be able to track sequence numbers without holes.
message FilteredEvent {
  string persistence_id = 1;
  int32 slice = 2;
  Offset offset = 3;
}
